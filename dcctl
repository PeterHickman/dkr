#!/usr/bin/env ruby
# frozen_string_literal: true

NAMES = %w[
  docker-compose.yaml
  docker-compose.yml
  compose.yaml
  compose.yml
]

def dropdead(text)
  puts text
  exit 1
end

def usage(cmd)
  puts

  if cmd
    puts "Unknown command [#{cmd}]"
    puts
  end

  puts 'dcctl up|down'
  puts '    up - bring up the services in docker-compose.yaml'
  puts '    down - take down the services in docker-compose.yaml'
  puts '    Add --file to pass a specific docker-compose.yaml file'

  exit 1
end

def cmd_up(compose_found)
  if compose_found
    system("docker compose --file #{compose_found} up --detach")
  else
    puts 'There is no docker-compose.yaml file available'
  end
end

def cmd_down(compose_found)
  if compose_found
    system("docker compose --file #{compose_found} down")
  else
    puts 'There is no docker-compose.yaml file available'
  end
end

def find_compose
  NAMES.each do |name|
    return name if File.exist?(name)
  end

  nil
end

def options
  opts = {}
  args = []

  x = ARGV.dup
  while x.any?
    o = x.shift
    if o == '--file'
      f = x.shift
      dropdead "Unknown file [#{f}]" unless File.exist?(f)
      opts['file'] = f
    else
      args << o
    end
  end

  [opts, args]
end

opts, args = options

compose_found = opts['file'] || find_compose

found = compose_found ? 'found' : 'not found'
puts "#{compose_found} file #{found}"
puts

cmd = args
case cmd
when 'up', 'start' then cmd_up(compose_found)
when 'down', 'stop' then cmd_down(compose_found)
else
  usage(cmd)
end
