#!/usr/bin/env ruby
# frozen_string_literal: true

require 'colorize'

def containers
  x = `docker ps -a`

  l = []
  x.split("\n").each do |line|
    exited = line.include?('Exited')

    y = line.chomp.split(/\s+/)
    next if y[-1] == 'NAMES'

    l << [y[-1], y[0], exited]
  end

  l.sort
end

def choose_container(title, list)
  puts title.bold

  list.each_with_index do |x, i|
    if x[2]
      puts "    #{i + 1} #{x[0].red} (down)"
    else
      puts "    #{i + 1} #{x[0].blue}"
    end
  end

  loop do
    print("Select [1-#{list.size}]: ".bold)
    opt = gets.to_i

    next unless opt >= 1 && opt <= list.size
    return list[opt - 1]
  end
end

def choose_command(title, exited)
  puts title.bold

  o = exited ? %w[start] : %w[stop restart shell] 

  o.each_with_index do |x, i|
    puts "    #{i + 1} #{x.blue}"
  end

  loop do
    print("Select [1-#{o.size}] ".bold)
    opt = gets.to_i

    next unless opt >= 1 && opt <= o.size
    return o[opt - 1]
  end
end

def execute(cmd)
  puts "    #{cmd}".green
  system(cmd)
end

c = containers

unless c.any?
  puts 'There are no containers'.red
  exit 1
end

c_name, c_id, c_exited = choose_container('Available containers', c)

cmd = choose_command('Available commands', c_exited)

case cmd
when 'stop', 'start', 'restart'
  execute("docker #{cmd} #{c_id}")
when 'shell'
  execute("docker exec -it #{c_id} bash")
end

exit 0

